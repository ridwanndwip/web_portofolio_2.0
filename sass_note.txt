ii// Nesting

-> Main adalah parent dari class container

.main{
    .container{
        background-color:Blue;
    }    
}

// (&) Parent Selector

-> Container adalah parent dari class main
.main{
    
    .container & {
        background-color:Blue;
    }
    
}

-> Meng-generate fungsi hover/child untuk parent 
.main{
    &:hover{
        backcolor:blue;
    }
}

-> Meng-generate otomatis nama dari parent name
.main{
    & &_class1{ (nama class Parent = main_class1)
        backcolor: blue;
    }
    & &_class2{  (nama class Parent = main_class2)
        backcolor: red;
    }
}

output :
.main .main_class1 {backcolor:blue}
.main .main_class2 {backcolor:red}

// Sass variables

-> Membuat variable sass di dalam style css/variabel local (harus menggunakan teknik nesting)
body {
    $primary-color: black;
    backcolor: $primary-color;

    h1{
        color: $primary-color;
    }    
}

-> Membuat variable sass di dalam style css/variabel global
body {
    $primary-color: black !global;
    backcolor: $primary-color;
}

h1{
    color: $primary-color;
}

-> Variabel map

$alert{
    'danger':red,
    'success':green,
    'warning':orange,
}

h1{
    color:map-get($alert,'success');
}

// Sass Mixin = Kumpulan Style yang dapat kita gunakan berulang-ulang

->  Simple Mixin

contoh kasus = .header ul li a

@mixin nama_mixin {
    backcolor: blue;
    margin: 0px;

    //menggunakan nesting didalam mixin
    li{
        list-style:none;
    }
}

- cara memanggil mixin

.header ul{
    @include nama_mixin();
}

-> argument pada mixin

@mixin text($size,$weight){
    font-size: $size;
    font-weight: $weight;
}
@include text(20px,regular);

atau bisa memberikan nilai default

@mixin text($size : 20px,$weight){
    font-size: $size;
    font-weight: $weight;
} 

@include text(regular);

git update 27/12
git update 28/12
git update 29/12
